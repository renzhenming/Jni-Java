# TODO --------------------------------------------------------------------------
-
# TODO CMake变量
# 声明变量:set(变量名 变量值)
set(var 666)
# 引用变量:message 命令用来打印
message("var = ${var}")
# CMake中所有变量都是string类型。可以使用set()和unset()命令来声明或移除一个变量 # 移除变量
unset(var)
message("my_var = ${var}") # 会取不到值，因为被移除了
# TODO CMake列表(lists)
# 声明列表:set(列表名 值1 值2 ... 值N) 或 set(列表名 "值1;值2;...;值N") set(list_var 1 2 3 4 5) # 字符串列表呢? CMake中所有变量都是string类型 # 或者
set(list_var2 "1;2;3;4;5") # 字符串列表呢?
message("list_var = ${list_var}")
message("list_var2 = ${list_var2}")
# TODO CMake流程控制-条件命令
# true(1，ON，YES，TRUE，Y，非0的值)
# false(0，OFF，NO，FALSE，N，IGNORE，NOTFOUND) set(if_tap OFF) # 定义一个变量if_tap，值为false set(elseif_tap ON) # 定义一个变量elseif_tap，值为ture
if(${if_tap})
    message("if")
elseif(${elseif_tap})
    message("elseif")
else(${if_tap}) # 可以不加入 ${if_tap} message("else")
# endif(${if_tap}) # 结束if
endif() # 结束if 可以不加
# 注意:elseif和else部分是可选的，也可以有多个elseif部分，缩进和空格对语句解析没有影响
# TODO CMake流程控制-循环命令
set(a "")
# a STREQUAL "xxx"(a等不等xxx，不等于) # NOT==!
while(NOT a STREQUAL "xxx")
    set(a "${a}x")
    message(">>>>>>a = ${a}")
endwhile()
#[[ 注意: break()命令可以跳出整个循环 continue()可以继续当前循环 ]]
foreach(item 1 2 3)
    message("1item = ${item}")
endforeach(item) # 结束for
foreach(item RANGE 2) # RANGE 默认从0开始， 所以是:0 1 2 message("2item = ${item}")
endforeach(item)
foreach(item RANGE 1 6 2) # 1 3 5 每次跳级2 message("3item = ${item}")
endforeach(item)
set(list_va3 1 2 3) # 列表
# foreach(item IN LISTS ${list_va3}) 没有报错，没有循环 foreach(item IN LISTS list_va3)
    message("4item = ${item}")
endforeach(item)
# TODO CMake自定义函数 Shell的函数很类似
#[[
ARGC:表示传入参数的个数 ARGV0:表示第一个参数，ARGV1、ARGV2以此类推即可 ARGV:表示所有参数
]]
function(num_method n1 n2 n3)
    message("call num_method method")
    message("n1 = ${n1}")
    message("n2 = ${n2}")
    message("n3 = ${n3}")
    message("ARGC = ${ARGC}")
    message("arg1 = ${ARGV0} arg2 = ${ARGV1} arg3 = ${ARGV2}")
    message("all args = ${ARGV}")
endfunction(num_method)
num_method(1 2 3) # 调用num_method函数
